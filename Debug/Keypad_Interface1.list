
Keypad_Interface1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f4c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  080010e4  080010e4  000110e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001190  08001190  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001190  08001190  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001190  08001190  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001190  08001190  00011190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001194  08001194  00011194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001198  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000064  080011fc  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  080011fc  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000009d3  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000032b  00000000  00000000  00020a67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000120  00000000  00000000  00020d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000e8  00000000  00000000  00020eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002bf2  00000000  00000000  00020fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001437  00000000  00000000  00023b92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000093db  00000000  00000000  00024fc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0002e3a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000a44  00000000  00000000  0002e3f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000064 	.word	0x20000064
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080010cc 	.word	0x080010cc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000068 	.word	0x20000068
 80001d4:	080010cc 	.word	0x080010cc

080001d8 <delay>:

#include <stdint.h>
#include <stdio.h>

void delay(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
	for (volatile uint32_t i=0;i<300000;i++);
 80001de:	2300      	movs	r3, #0
 80001e0:	607b      	str	r3, [r7, #4]
 80001e2:	e002      	b.n	80001ea <delay+0x12>
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	3301      	adds	r3, #1
 80001e8:	607b      	str	r3, [r7, #4]
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	4a04      	ldr	r2, [pc, #16]	; (8000200 <delay+0x28>)
 80001ee:	4293      	cmp	r3, r2
 80001f0:	d9f8      	bls.n	80001e4 <delay+0xc>
}
 80001f2:	bf00      	nop
 80001f4:	bf00      	nop
 80001f6:	370c      	adds	r7, #12
 80001f8:	46bd      	mov	sp, r7
 80001fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fe:	4770      	bx	lr
 8000200:	000493df 	.word	0x000493df

08000204 <main>:

int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b086      	sub	sp, #24
 8000208:	af00      	add	r7, sp, #0
	//RCC - 0x4002 3800 , Address offset: 0x30
	uint32_t *portcAHB1ENR =(uint32_t*)0x40023830;
 800020a:	4b88      	ldr	r3, [pc, #544]	; (800042c <main+0x228>)
 800020c:	617b      	str	r3, [r7, #20]

	//GPIOC - 0x4002 0800
	uint32_t *portcMODER=(uint32_t*)0x40020800; //Port C - 0x0000 0000
 800020e:	4b88      	ldr	r3, [pc, #544]	; (8000430 <main+0x22c>)
 8000210:	613b      	str	r3, [r7, #16]
	uint32_t *portPUPDR=(uint32_t*)0x4002080C; //Address offset: 0x0C
 8000212:	4b88      	ldr	r3, [pc, #544]	; (8000434 <main+0x230>)
 8000214:	60fb      	str	r3, [r7, #12]

	uint32_t *portcODR=(uint32_t*)0x40020814; //Address offset: 0x14
 8000216:	4b88      	ldr	r3, [pc, #544]	; (8000438 <main+0x234>)
 8000218:	60bb      	str	r3, [r7, #8]
	uint32_t *portcIDR=(uint32_t*)0x40020810; //Address offset: 0x10
 800021a:	4b88      	ldr	r3, [pc, #544]	; (800043c <main+0x238>)
 800021c:	607b      	str	r3, [r7, #4]


	// Enable the peripheral clock of GPIOC Register
	//*portcAHB1ENR|=0X04;
	*portcAHB1ENR  |= (1<<2); //GPIOCEN - pin 2
 800021e:	697b      	ldr	r3, [r7, #20]
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	f043 0204 	orr.w	r2, r3, #4
 8000226:	697b      	ldr	r3, [r7, #20]
 8000228:	601a      	str	r2, [r3, #0]

	//configure COLUMN GPIO IN INPUT MODE(00) PC4-PC7 (Pin 8 to Pin 15) - 0000 0000
	//configure ROW  GPIO IN OUTPUT MODE(01)  PC0-PC3 (Pin 0 to Pin 7) - 0101 0101
	//pin 16 to 31 free
	*portcMODER &= 0XFFFF0000; //clear
 800022a:	693b      	ldr	r3, [r7, #16]
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	0c1b      	lsrs	r3, r3, #16
 8000230:	041b      	lsls	r3, r3, #16
 8000232:	693a      	ldr	r2, [r7, #16]
 8000234:	6013      	str	r3, [r2, #0]
	*portcMODER |= 0X00000055; //Set respective values
 8000236:	693b      	ldr	r3, [r7, #16]
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	f043 0255 	orr.w	r2, r3, #85	; 0x55
 800023e:	693b      	ldr	r3, [r7, #16]
 8000240:	601a      	str	r2, [r3, #0]

	//pullup(01) for input PC4-PC7 (0101 0101), no pullup(00) for output PC0-PC3(0000 0000)
	*portPUPDR &= 0XFFFF0000; //clear
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	0c1b      	lsrs	r3, r3, #16
 8000248:	041b      	lsls	r3, r3, #16
 800024a:	68fa      	ldr	r2, [r7, #12]
 800024c:	6013      	str	r3, [r2, #0]
	*portPUPDR |= 0X00005500; //Set respective values
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	f443 42aa 	orr.w	r2, r3, #21760	; 0x5500
 8000256:	68fb      	ldr	r3, [r7, #12]
 8000258:	601a      	str	r2, [r3, #0]

	//set 1 in Rows(PC0-PC3)
	*portcODR|=0x0f;
 800025a:	68bb      	ldr	r3, [r7, #8]
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	f043 020f 	orr.w	r2, r3, #15
 8000262:	68bb      	ldr	r3, [r7, #8]
 8000264:	601a      	str	r2, [r3, #0]
	//Send 1 for column(PC4-PC7)
	//Send 0 for row(PC0-PC3) - each row at a time
	while(1)
	{
		//MAKE R1 LOW
		*portcODR|=0x0f;
 8000266:	68bb      	ldr	r3, [r7, #8]
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	f043 020f 	orr.w	r2, r3, #15
 800026e:	68bb      	ldr	r3, [r7, #8]
 8000270:	601a      	str	r2, [r3, #0]
		*portcODR &= ~(1<<0);
 8000272:	68bb      	ldr	r3, [r7, #8]
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	f023 0201 	bic.w	r2, r3, #1
 800027a:	68bb      	ldr	r3, [r7, #8]
 800027c:	601a      	str	r2, [r3, #0]

		if(!(*portcIDR & (1 <<4 ))) //Pin PC4
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	f003 0310 	and.w	r3, r3, #16
 8000286:	2b00      	cmp	r3, #0
 8000288:	d104      	bne.n	8000294 <main+0x90>
		{
			//key 1 is pressed
			delay();
 800028a:	f7ff ffa5 	bl	80001d8 <delay>
			printf("1 \n");
 800028e:	486c      	ldr	r0, [pc, #432]	; (8000440 <main+0x23c>)
 8000290:	f000 fa8c 	bl	80007ac <puts>
		}
		if(!(*portcIDR & (1 <<5 ))) //Pin PC5
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	f003 0320 	and.w	r3, r3, #32
 800029c:	2b00      	cmp	r3, #0
 800029e:	d104      	bne.n	80002aa <main+0xa6>
		{
			//key 2 is pressed
			delay();
 80002a0:	f7ff ff9a 	bl	80001d8 <delay>
			printf("2 \n");
 80002a4:	4867      	ldr	r0, [pc, #412]	; (8000444 <main+0x240>)
 80002a6:	f000 fa81 	bl	80007ac <puts>
		}
		if(!(*portcIDR & (1 <<6 ))) //Pin PC6
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d104      	bne.n	80002c0 <main+0xbc>
		{
			//key 3 is pressed
			delay();
 80002b6:	f7ff ff8f 	bl	80001d8 <delay>
			printf("3 \n");
 80002ba:	4863      	ldr	r0, [pc, #396]	; (8000448 <main+0x244>)
 80002bc:	f000 fa76 	bl	80007ac <puts>
		}
		if(!(*portcIDR & (1 <<7 ))) //Pin PC7
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d104      	bne.n	80002d6 <main+0xd2>
		{
			//key A is pressed
			delay();
 80002cc:	f7ff ff84 	bl	80001d8 <delay>
			printf("A \n");
 80002d0:	485e      	ldr	r0, [pc, #376]	; (800044c <main+0x248>)
 80002d2:	f000 fa6b 	bl	80007ac <puts>
		}


		//MAKE R2 LOW
		*portcODR|=0x0f;
 80002d6:	68bb      	ldr	r3, [r7, #8]
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	f043 020f 	orr.w	r2, r3, #15
 80002de:	68bb      	ldr	r3, [r7, #8]
 80002e0:	601a      	str	r2, [r3, #0]
		*portcODR &= ~(1<<1);
 80002e2:	68bb      	ldr	r3, [r7, #8]
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	f023 0202 	bic.w	r2, r3, #2
 80002ea:	68bb      	ldr	r3, [r7, #8]
 80002ec:	601a      	str	r2, [r3, #0]

		if(!(*portcIDR & (1 <<4 ))) //Pin PC4
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	f003 0310 	and.w	r3, r3, #16
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d104      	bne.n	8000304 <main+0x100>
		{
			//key 4 is pressed
			delay();
 80002fa:	f7ff ff6d 	bl	80001d8 <delay>
			printf("4 \n");
 80002fe:	4854      	ldr	r0, [pc, #336]	; (8000450 <main+0x24c>)
 8000300:	f000 fa54 	bl	80007ac <puts>
		}
		if(!(*portcIDR & (1 <<5 ))) //Pin PC5
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f003 0320 	and.w	r3, r3, #32
 800030c:	2b00      	cmp	r3, #0
 800030e:	d104      	bne.n	800031a <main+0x116>
		{
			//key 5 is pressed
			delay();
 8000310:	f7ff ff62 	bl	80001d8 <delay>
			printf("5 \n");
 8000314:	484f      	ldr	r0, [pc, #316]	; (8000454 <main+0x250>)
 8000316:	f000 fa49 	bl	80007ac <puts>
		}
		if(!(*portcIDR & (1 <<6 ))) //Pin PC6
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000322:	2b00      	cmp	r3, #0
 8000324:	d104      	bne.n	8000330 <main+0x12c>
		{
			//key 6 is pressed
			delay();
 8000326:	f7ff ff57 	bl	80001d8 <delay>
			printf("6 \n");
 800032a:	484b      	ldr	r0, [pc, #300]	; (8000458 <main+0x254>)
 800032c:	f000 fa3e 	bl	80007ac <puts>
		}
		if(!(*portcIDR & (1 <<7 ))) //Pin PC7
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000338:	2b00      	cmp	r3, #0
 800033a:	d104      	bne.n	8000346 <main+0x142>
		{
			//key B is pressed
			delay();
 800033c:	f7ff ff4c 	bl	80001d8 <delay>
			printf("B \n");
 8000340:	4846      	ldr	r0, [pc, #280]	; (800045c <main+0x258>)
 8000342:	f000 fa33 	bl	80007ac <puts>
		}


		//MAKE R3 LOW
		*portcODR|=0x0f;
 8000346:	68bb      	ldr	r3, [r7, #8]
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	f043 020f 	orr.w	r2, r3, #15
 800034e:	68bb      	ldr	r3, [r7, #8]
 8000350:	601a      	str	r2, [r3, #0]
		*portcODR &= ~(1<<2);
 8000352:	68bb      	ldr	r3, [r7, #8]
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	f023 0204 	bic.w	r2, r3, #4
 800035a:	68bb      	ldr	r3, [r7, #8]
 800035c:	601a      	str	r2, [r3, #0]

		if(!(*portcIDR & (1 <<4 ))) //Pin PC4
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	f003 0310 	and.w	r3, r3, #16
 8000366:	2b00      	cmp	r3, #0
 8000368:	d104      	bne.n	8000374 <main+0x170>
		{
			//key 7 is pressed
			delay();
 800036a:	f7ff ff35 	bl	80001d8 <delay>
			printf("7 \n");
 800036e:	483c      	ldr	r0, [pc, #240]	; (8000460 <main+0x25c>)
 8000370:	f000 fa1c 	bl	80007ac <puts>
		}
		if(!(*portcIDR & (1 <<5 ))) //Pin PC5
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	f003 0320 	and.w	r3, r3, #32
 800037c:	2b00      	cmp	r3, #0
 800037e:	d104      	bne.n	800038a <main+0x186>
		{
			//key 8 is pressed
			delay();
 8000380:	f7ff ff2a 	bl	80001d8 <delay>
			printf("8 \n");
 8000384:	4837      	ldr	r0, [pc, #220]	; (8000464 <main+0x260>)
 8000386:	f000 fa11 	bl	80007ac <puts>
		}
		if(!(*portcIDR & (1 <<6 ))) //Pin PC6
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000392:	2b00      	cmp	r3, #0
 8000394:	d104      	bne.n	80003a0 <main+0x19c>
		{
			//key 9 is pressed
			delay();
 8000396:	f7ff ff1f 	bl	80001d8 <delay>
			printf("9 \n");
 800039a:	4833      	ldr	r0, [pc, #204]	; (8000468 <main+0x264>)
 800039c:	f000 fa06 	bl	80007ac <puts>
		}
		if(!(*portcIDR & (1 <<7 ))) //Pin PC7
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d104      	bne.n	80003b6 <main+0x1b2>
		{
			//key C is pressed
			delay();
 80003ac:	f7ff ff14 	bl	80001d8 <delay>
			printf("C \n");
 80003b0:	482e      	ldr	r0, [pc, #184]	; (800046c <main+0x268>)
 80003b2:	f000 f9fb 	bl	80007ac <puts>
		}


		//MAKE R4 LOW
		*portcODR|=0x0f;
 80003b6:	68bb      	ldr	r3, [r7, #8]
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	f043 020f 	orr.w	r2, r3, #15
 80003be:	68bb      	ldr	r3, [r7, #8]
 80003c0:	601a      	str	r2, [r3, #0]
		*portcODR &= ~(1<<3);
 80003c2:	68bb      	ldr	r3, [r7, #8]
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	f023 0208 	bic.w	r2, r3, #8
 80003ca:	68bb      	ldr	r3, [r7, #8]
 80003cc:	601a      	str	r2, [r3, #0]

		if(!(*portcIDR & (1 <<4 ))) //Pin PC4
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	f003 0310 	and.w	r3, r3, #16
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d104      	bne.n	80003e4 <main+0x1e0>
		{
			//key start is pressed
			delay();
 80003da:	f7ff fefd 	bl	80001d8 <delay>
			printf("start \n");
 80003de:	4824      	ldr	r0, [pc, #144]	; (8000470 <main+0x26c>)
 80003e0:	f000 f9e4 	bl	80007ac <puts>
		}
		if(!(*portcIDR & (1 <<5 ))) //Pin PC5
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	f003 0320 	and.w	r3, r3, #32
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d104      	bne.n	80003fa <main+0x1f6>
		{
			//key 0 is pressed
			delay();
 80003f0:	f7ff fef2 	bl	80001d8 <delay>
			printf("0 \n");
 80003f4:	481f      	ldr	r0, [pc, #124]	; (8000474 <main+0x270>)
 80003f6:	f000 f9d9 	bl	80007ac <puts>
		}
		if(!(*portcIDR & (1 <<6 ))) //Pin PC6
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000402:	2b00      	cmp	r3, #0
 8000404:	d104      	bne.n	8000410 <main+0x20c>
		{
			//key stop is pressed
			delay();
 8000406:	f7ff fee7 	bl	80001d8 <delay>
			printf("stop \n");
 800040a:	481b      	ldr	r0, [pc, #108]	; (8000478 <main+0x274>)
 800040c:	f000 f9ce 	bl	80007ac <puts>
		}
		if(!(*portcIDR & (1 <<7 ))) //Pin PC7
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000418:	2b00      	cmp	r3, #0
 800041a:	f47f af24 	bne.w	8000266 <main+0x62>
		{
			//key D is pressed
			delay();
 800041e:	f7ff fedb 	bl	80001d8 <delay>
			printf("D \n");
 8000422:	4816      	ldr	r0, [pc, #88]	; (800047c <main+0x278>)
 8000424:	f000 f9c2 	bl	80007ac <puts>
		*portcODR|=0x0f;
 8000428:	e71d      	b.n	8000266 <main+0x62>
 800042a:	bf00      	nop
 800042c:	40023830 	.word	0x40023830
 8000430:	40020800 	.word	0x40020800
 8000434:	4002080c 	.word	0x4002080c
 8000438:	40020814 	.word	0x40020814
 800043c:	40020810 	.word	0x40020810
 8000440:	080010e4 	.word	0x080010e4
 8000444:	080010e8 	.word	0x080010e8
 8000448:	080010ec 	.word	0x080010ec
 800044c:	080010f0 	.word	0x080010f0
 8000450:	080010f4 	.word	0x080010f4
 8000454:	080010f8 	.word	0x080010f8
 8000458:	080010fc 	.word	0x080010fc
 800045c:	08001100 	.word	0x08001100
 8000460:	08001104 	.word	0x08001104
 8000464:	08001108 	.word	0x08001108
 8000468:	0800110c 	.word	0x0800110c
 800046c:	08001110 	.word	0x08001110
 8000470:	08001114 	.word	0x08001114
 8000474:	0800111c 	.word	0x0800111c
 8000478:	08001120 	.word	0x08001120
 800047c:	08001128 	.word	0x08001128

08000480 <ITM_SendChar>:
#define DEMCR        *((volatile uint32_t*) 0xE000EDFCU )
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   *((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          *((volatile uint32_t*) 0xE0000E00 )
void ITM_SendChar(uint8_t ch)
{	//Enable TRCENA
 8000480:	b480      	push	{r7}
 8000482:	b083      	sub	sp, #12
 8000484:	af00      	add	r7, sp, #0
 8000486:	4603      	mov	r3, r0
 8000488:	71fb      	strb	r3, [r7, #7]
	DEMCR |= ( 1 << 24);
 800048a:	4b0f      	ldr	r3, [pc, #60]	; (80004c8 <ITM_SendChar+0x48>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	4a0e      	ldr	r2, [pc, #56]	; (80004c8 <ITM_SendChar+0x48>)
 8000490:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000494:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000496:	4b0d      	ldr	r3, [pc, #52]	; (80004cc <ITM_SendChar+0x4c>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	4a0c      	ldr	r2, [pc, #48]	; (80004cc <ITM_SendChar+0x4c>)
 800049c:	f043 0301 	orr.w	r3, r3, #1
 80004a0:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80004a2:	bf00      	nop
 80004a4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	f003 0301 	and.w	r3, r3, #1
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d0f8      	beq.n	80004a4 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80004b2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80004b6:	79fb      	ldrb	r3, [r7, #7]
 80004b8:	6013      	str	r3, [r2, #0]
}
 80004ba:	bf00      	nop
 80004bc:	370c      	adds	r7, #12
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop
 80004c8:	e000edfc 	.word	0xe000edfc
 80004cc:	e0000e00 	.word	0xe0000e00

080004d0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b086      	sub	sp, #24
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	60f8      	str	r0, [r7, #12]
 80004d8:	60b9      	str	r1, [r7, #8]
 80004da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004dc:	2300      	movs	r3, #0
 80004de:	617b      	str	r3, [r7, #20]
 80004e0:	e00a      	b.n	80004f8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80004e2:	f3af 8000 	nop.w
 80004e6:	4601      	mov	r1, r0
 80004e8:	68bb      	ldr	r3, [r7, #8]
 80004ea:	1c5a      	adds	r2, r3, #1
 80004ec:	60ba      	str	r2, [r7, #8]
 80004ee:	b2ca      	uxtb	r2, r1
 80004f0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004f2:	697b      	ldr	r3, [r7, #20]
 80004f4:	3301      	adds	r3, #1
 80004f6:	617b      	str	r3, [r7, #20]
 80004f8:	697a      	ldr	r2, [r7, #20]
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	429a      	cmp	r2, r3
 80004fe:	dbf0      	blt.n	80004e2 <_read+0x12>
  }

  return len;
 8000500:	687b      	ldr	r3, [r7, #4]
}
 8000502:	4618      	mov	r0, r3
 8000504:	3718      	adds	r7, #24
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}

0800050a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800050a:	b580      	push	{r7, lr}
 800050c:	b086      	sub	sp, #24
 800050e:	af00      	add	r7, sp, #0
 8000510:	60f8      	str	r0, [r7, #12]
 8000512:	60b9      	str	r1, [r7, #8]
 8000514:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000516:	2300      	movs	r3, #0
 8000518:	617b      	str	r3, [r7, #20]
 800051a:	e009      	b.n	8000530 <_write+0x26>
  {
	  ITM_SendChar(*ptr++);
 800051c:	68bb      	ldr	r3, [r7, #8]
 800051e:	1c5a      	adds	r2, r3, #1
 8000520:	60ba      	str	r2, [r7, #8]
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	4618      	mov	r0, r3
 8000526:	f7ff ffab 	bl	8000480 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800052a:	697b      	ldr	r3, [r7, #20]
 800052c:	3301      	adds	r3, #1
 800052e:	617b      	str	r3, [r7, #20]
 8000530:	697a      	ldr	r2, [r7, #20]
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	429a      	cmp	r2, r3
 8000536:	dbf1      	blt.n	800051c <_write+0x12>
    //__io_putchar(*ptr++);
  }
  return len;
 8000538:	687b      	ldr	r3, [r7, #4]
}
 800053a:	4618      	mov	r0, r3
 800053c:	3718      	adds	r7, #24
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}

08000542 <_close>:

int _close(int file)
{
 8000542:	b480      	push	{r7}
 8000544:	b083      	sub	sp, #12
 8000546:	af00      	add	r7, sp, #0
 8000548:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800054a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800054e:	4618      	mov	r0, r3
 8000550:	370c      	adds	r7, #12
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr

0800055a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800055a:	b480      	push	{r7}
 800055c:	b083      	sub	sp, #12
 800055e:	af00      	add	r7, sp, #0
 8000560:	6078      	str	r0, [r7, #4]
 8000562:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000564:	683b      	ldr	r3, [r7, #0]
 8000566:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800056a:	605a      	str	r2, [r3, #4]
  return 0;
 800056c:	2300      	movs	r3, #0
}
 800056e:	4618      	mov	r0, r3
 8000570:	370c      	adds	r7, #12
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr

0800057a <_isatty>:

int _isatty(int file)
{
 800057a:	b480      	push	{r7}
 800057c:	b083      	sub	sp, #12
 800057e:	af00      	add	r7, sp, #0
 8000580:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000582:	2301      	movs	r3, #1
}
 8000584:	4618      	mov	r0, r3
 8000586:	370c      	adds	r7, #12
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr

08000590 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	60f8      	str	r0, [r7, #12]
 8000598:	60b9      	str	r1, [r7, #8]
 800059a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800059c:	2300      	movs	r3, #0
}
 800059e:	4618      	mov	r0, r3
 80005a0:	3714      	adds	r7, #20
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
	...

080005ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b086      	sub	sp, #24
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005b4:	4a14      	ldr	r2, [pc, #80]	; (8000608 <_sbrk+0x5c>)
 80005b6:	4b15      	ldr	r3, [pc, #84]	; (800060c <_sbrk+0x60>)
 80005b8:	1ad3      	subs	r3, r2, r3
 80005ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005bc:	697b      	ldr	r3, [r7, #20]
 80005be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005c0:	4b13      	ldr	r3, [pc, #76]	; (8000610 <_sbrk+0x64>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d102      	bne.n	80005ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005c8:	4b11      	ldr	r3, [pc, #68]	; (8000610 <_sbrk+0x64>)
 80005ca:	4a12      	ldr	r2, [pc, #72]	; (8000614 <_sbrk+0x68>)
 80005cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005ce:	4b10      	ldr	r3, [pc, #64]	; (8000610 <_sbrk+0x64>)
 80005d0:	681a      	ldr	r2, [r3, #0]
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	4413      	add	r3, r2
 80005d6:	693a      	ldr	r2, [r7, #16]
 80005d8:	429a      	cmp	r2, r3
 80005da:	d207      	bcs.n	80005ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005dc:	f000 f846 	bl	800066c <__errno>
 80005e0:	4603      	mov	r3, r0
 80005e2:	220c      	movs	r2, #12
 80005e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005e6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ea:	e009      	b.n	8000600 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005ec:	4b08      	ldr	r3, [pc, #32]	; (8000610 <_sbrk+0x64>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005f2:	4b07      	ldr	r3, [pc, #28]	; (8000610 <_sbrk+0x64>)
 80005f4:	681a      	ldr	r2, [r3, #0]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	4413      	add	r3, r2
 80005fa:	4a05      	ldr	r2, [pc, #20]	; (8000610 <_sbrk+0x64>)
 80005fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005fe:	68fb      	ldr	r3, [r7, #12]
}
 8000600:	4618      	mov	r0, r3
 8000602:	3718      	adds	r7, #24
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	20020000 	.word	0x20020000
 800060c:	00000400 	.word	0x00000400
 8000610:	20000080 	.word	0x20000080
 8000614:	20000098 	.word	0x20000098

08000618 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000618:	480d      	ldr	r0, [pc, #52]	; (8000650 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800061a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800061c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000620:	480c      	ldr	r0, [pc, #48]	; (8000654 <LoopForever+0x6>)
  ldr r1, =_edata
 8000622:	490d      	ldr	r1, [pc, #52]	; (8000658 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000624:	4a0d      	ldr	r2, [pc, #52]	; (800065c <LoopForever+0xe>)
  movs r3, #0
 8000626:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000628:	e002      	b.n	8000630 <LoopCopyDataInit>

0800062a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800062a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800062c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800062e:	3304      	adds	r3, #4

08000630 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000630:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000632:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000634:	d3f9      	bcc.n	800062a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000636:	4a0a      	ldr	r2, [pc, #40]	; (8000660 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000638:	4c0a      	ldr	r4, [pc, #40]	; (8000664 <LoopForever+0x16>)
  movs r3, #0
 800063a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800063c:	e001      	b.n	8000642 <LoopFillZerobss>

0800063e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800063e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000640:	3204      	adds	r2, #4

08000642 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000642:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000644:	d3fb      	bcc.n	800063e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000646:	f000 f817 	bl	8000678 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800064a:	f7ff fddb 	bl	8000204 <main>

0800064e <LoopForever>:

LoopForever:
  b LoopForever
 800064e:	e7fe      	b.n	800064e <LoopForever>
  ldr   r0, =_estack
 8000650:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000654:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000658:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 800065c:	08001198 	.word	0x08001198
  ldr r2, =_sbss
 8000660:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000664:	20000094 	.word	0x20000094

08000668 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000668:	e7fe      	b.n	8000668 <ADC_IRQHandler>
	...

0800066c <__errno>:
 800066c:	4b01      	ldr	r3, [pc, #4]	; (8000674 <__errno+0x8>)
 800066e:	6818      	ldr	r0, [r3, #0]
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	20000000 	.word	0x20000000

08000678 <__libc_init_array>:
 8000678:	b570      	push	{r4, r5, r6, lr}
 800067a:	4d0d      	ldr	r5, [pc, #52]	; (80006b0 <__libc_init_array+0x38>)
 800067c:	4c0d      	ldr	r4, [pc, #52]	; (80006b4 <__libc_init_array+0x3c>)
 800067e:	1b64      	subs	r4, r4, r5
 8000680:	10a4      	asrs	r4, r4, #2
 8000682:	2600      	movs	r6, #0
 8000684:	42a6      	cmp	r6, r4
 8000686:	d109      	bne.n	800069c <__libc_init_array+0x24>
 8000688:	4d0b      	ldr	r5, [pc, #44]	; (80006b8 <__libc_init_array+0x40>)
 800068a:	4c0c      	ldr	r4, [pc, #48]	; (80006bc <__libc_init_array+0x44>)
 800068c:	f000 fd1e 	bl	80010cc <_init>
 8000690:	1b64      	subs	r4, r4, r5
 8000692:	10a4      	asrs	r4, r4, #2
 8000694:	2600      	movs	r6, #0
 8000696:	42a6      	cmp	r6, r4
 8000698:	d105      	bne.n	80006a6 <__libc_init_array+0x2e>
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f855 3b04 	ldr.w	r3, [r5], #4
 80006a0:	4798      	blx	r3
 80006a2:	3601      	adds	r6, #1
 80006a4:	e7ee      	b.n	8000684 <__libc_init_array+0xc>
 80006a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80006aa:	4798      	blx	r3
 80006ac:	3601      	adds	r6, #1
 80006ae:	e7f2      	b.n	8000696 <__libc_init_array+0x1e>
 80006b0:	08001190 	.word	0x08001190
 80006b4:	08001190 	.word	0x08001190
 80006b8:	08001190 	.word	0x08001190
 80006bc:	08001194 	.word	0x08001194

080006c0 <memset>:
 80006c0:	4402      	add	r2, r0
 80006c2:	4603      	mov	r3, r0
 80006c4:	4293      	cmp	r3, r2
 80006c6:	d100      	bne.n	80006ca <memset+0xa>
 80006c8:	4770      	bx	lr
 80006ca:	f803 1b01 	strb.w	r1, [r3], #1
 80006ce:	e7f9      	b.n	80006c4 <memset+0x4>

080006d0 <_puts_r>:
 80006d0:	b570      	push	{r4, r5, r6, lr}
 80006d2:	460e      	mov	r6, r1
 80006d4:	4605      	mov	r5, r0
 80006d6:	b118      	cbz	r0, 80006e0 <_puts_r+0x10>
 80006d8:	6983      	ldr	r3, [r0, #24]
 80006da:	b90b      	cbnz	r3, 80006e0 <_puts_r+0x10>
 80006dc:	f000 fa48 	bl	8000b70 <__sinit>
 80006e0:	69ab      	ldr	r3, [r5, #24]
 80006e2:	68ac      	ldr	r4, [r5, #8]
 80006e4:	b913      	cbnz	r3, 80006ec <_puts_r+0x1c>
 80006e6:	4628      	mov	r0, r5
 80006e8:	f000 fa42 	bl	8000b70 <__sinit>
 80006ec:	4b2c      	ldr	r3, [pc, #176]	; (80007a0 <_puts_r+0xd0>)
 80006ee:	429c      	cmp	r4, r3
 80006f0:	d120      	bne.n	8000734 <_puts_r+0x64>
 80006f2:	686c      	ldr	r4, [r5, #4]
 80006f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80006f6:	07db      	lsls	r3, r3, #31
 80006f8:	d405      	bmi.n	8000706 <_puts_r+0x36>
 80006fa:	89a3      	ldrh	r3, [r4, #12]
 80006fc:	0598      	lsls	r0, r3, #22
 80006fe:	d402      	bmi.n	8000706 <_puts_r+0x36>
 8000700:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000702:	f000 fad3 	bl	8000cac <__retarget_lock_acquire_recursive>
 8000706:	89a3      	ldrh	r3, [r4, #12]
 8000708:	0719      	lsls	r1, r3, #28
 800070a:	d51d      	bpl.n	8000748 <_puts_r+0x78>
 800070c:	6923      	ldr	r3, [r4, #16]
 800070e:	b1db      	cbz	r3, 8000748 <_puts_r+0x78>
 8000710:	3e01      	subs	r6, #1
 8000712:	68a3      	ldr	r3, [r4, #8]
 8000714:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000718:	3b01      	subs	r3, #1
 800071a:	60a3      	str	r3, [r4, #8]
 800071c:	bb39      	cbnz	r1, 800076e <_puts_r+0x9e>
 800071e:	2b00      	cmp	r3, #0
 8000720:	da38      	bge.n	8000794 <_puts_r+0xc4>
 8000722:	4622      	mov	r2, r4
 8000724:	210a      	movs	r1, #10
 8000726:	4628      	mov	r0, r5
 8000728:	f000 f848 	bl	80007bc <__swbuf_r>
 800072c:	3001      	adds	r0, #1
 800072e:	d011      	beq.n	8000754 <_puts_r+0x84>
 8000730:	250a      	movs	r5, #10
 8000732:	e011      	b.n	8000758 <_puts_r+0x88>
 8000734:	4b1b      	ldr	r3, [pc, #108]	; (80007a4 <_puts_r+0xd4>)
 8000736:	429c      	cmp	r4, r3
 8000738:	d101      	bne.n	800073e <_puts_r+0x6e>
 800073a:	68ac      	ldr	r4, [r5, #8]
 800073c:	e7da      	b.n	80006f4 <_puts_r+0x24>
 800073e:	4b1a      	ldr	r3, [pc, #104]	; (80007a8 <_puts_r+0xd8>)
 8000740:	429c      	cmp	r4, r3
 8000742:	bf08      	it	eq
 8000744:	68ec      	ldreq	r4, [r5, #12]
 8000746:	e7d5      	b.n	80006f4 <_puts_r+0x24>
 8000748:	4621      	mov	r1, r4
 800074a:	4628      	mov	r0, r5
 800074c:	f000 f888 	bl	8000860 <__swsetup_r>
 8000750:	2800      	cmp	r0, #0
 8000752:	d0dd      	beq.n	8000710 <_puts_r+0x40>
 8000754:	f04f 35ff 	mov.w	r5, #4294967295
 8000758:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800075a:	07da      	lsls	r2, r3, #31
 800075c:	d405      	bmi.n	800076a <_puts_r+0x9a>
 800075e:	89a3      	ldrh	r3, [r4, #12]
 8000760:	059b      	lsls	r3, r3, #22
 8000762:	d402      	bmi.n	800076a <_puts_r+0x9a>
 8000764:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000766:	f000 faa2 	bl	8000cae <__retarget_lock_release_recursive>
 800076a:	4628      	mov	r0, r5
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	2b00      	cmp	r3, #0
 8000770:	da04      	bge.n	800077c <_puts_r+0xac>
 8000772:	69a2      	ldr	r2, [r4, #24]
 8000774:	429a      	cmp	r2, r3
 8000776:	dc06      	bgt.n	8000786 <_puts_r+0xb6>
 8000778:	290a      	cmp	r1, #10
 800077a:	d004      	beq.n	8000786 <_puts_r+0xb6>
 800077c:	6823      	ldr	r3, [r4, #0]
 800077e:	1c5a      	adds	r2, r3, #1
 8000780:	6022      	str	r2, [r4, #0]
 8000782:	7019      	strb	r1, [r3, #0]
 8000784:	e7c5      	b.n	8000712 <_puts_r+0x42>
 8000786:	4622      	mov	r2, r4
 8000788:	4628      	mov	r0, r5
 800078a:	f000 f817 	bl	80007bc <__swbuf_r>
 800078e:	3001      	adds	r0, #1
 8000790:	d1bf      	bne.n	8000712 <_puts_r+0x42>
 8000792:	e7df      	b.n	8000754 <_puts_r+0x84>
 8000794:	6823      	ldr	r3, [r4, #0]
 8000796:	250a      	movs	r5, #10
 8000798:	1c5a      	adds	r2, r3, #1
 800079a:	6022      	str	r2, [r4, #0]
 800079c:	701d      	strb	r5, [r3, #0]
 800079e:	e7db      	b.n	8000758 <_puts_r+0x88>
 80007a0:	08001150 	.word	0x08001150
 80007a4:	08001170 	.word	0x08001170
 80007a8:	08001130 	.word	0x08001130

080007ac <puts>:
 80007ac:	4b02      	ldr	r3, [pc, #8]	; (80007b8 <puts+0xc>)
 80007ae:	4601      	mov	r1, r0
 80007b0:	6818      	ldr	r0, [r3, #0]
 80007b2:	f7ff bf8d 	b.w	80006d0 <_puts_r>
 80007b6:	bf00      	nop
 80007b8:	20000000 	.word	0x20000000

080007bc <__swbuf_r>:
 80007bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007be:	460e      	mov	r6, r1
 80007c0:	4614      	mov	r4, r2
 80007c2:	4605      	mov	r5, r0
 80007c4:	b118      	cbz	r0, 80007ce <__swbuf_r+0x12>
 80007c6:	6983      	ldr	r3, [r0, #24]
 80007c8:	b90b      	cbnz	r3, 80007ce <__swbuf_r+0x12>
 80007ca:	f000 f9d1 	bl	8000b70 <__sinit>
 80007ce:	4b21      	ldr	r3, [pc, #132]	; (8000854 <__swbuf_r+0x98>)
 80007d0:	429c      	cmp	r4, r3
 80007d2:	d12b      	bne.n	800082c <__swbuf_r+0x70>
 80007d4:	686c      	ldr	r4, [r5, #4]
 80007d6:	69a3      	ldr	r3, [r4, #24]
 80007d8:	60a3      	str	r3, [r4, #8]
 80007da:	89a3      	ldrh	r3, [r4, #12]
 80007dc:	071a      	lsls	r2, r3, #28
 80007de:	d52f      	bpl.n	8000840 <__swbuf_r+0x84>
 80007e0:	6923      	ldr	r3, [r4, #16]
 80007e2:	b36b      	cbz	r3, 8000840 <__swbuf_r+0x84>
 80007e4:	6923      	ldr	r3, [r4, #16]
 80007e6:	6820      	ldr	r0, [r4, #0]
 80007e8:	1ac0      	subs	r0, r0, r3
 80007ea:	6963      	ldr	r3, [r4, #20]
 80007ec:	b2f6      	uxtb	r6, r6
 80007ee:	4283      	cmp	r3, r0
 80007f0:	4637      	mov	r7, r6
 80007f2:	dc04      	bgt.n	80007fe <__swbuf_r+0x42>
 80007f4:	4621      	mov	r1, r4
 80007f6:	4628      	mov	r0, r5
 80007f8:	f000 f926 	bl	8000a48 <_fflush_r>
 80007fc:	bb30      	cbnz	r0, 800084c <__swbuf_r+0x90>
 80007fe:	68a3      	ldr	r3, [r4, #8]
 8000800:	3b01      	subs	r3, #1
 8000802:	60a3      	str	r3, [r4, #8]
 8000804:	6823      	ldr	r3, [r4, #0]
 8000806:	1c5a      	adds	r2, r3, #1
 8000808:	6022      	str	r2, [r4, #0]
 800080a:	701e      	strb	r6, [r3, #0]
 800080c:	6963      	ldr	r3, [r4, #20]
 800080e:	3001      	adds	r0, #1
 8000810:	4283      	cmp	r3, r0
 8000812:	d004      	beq.n	800081e <__swbuf_r+0x62>
 8000814:	89a3      	ldrh	r3, [r4, #12]
 8000816:	07db      	lsls	r3, r3, #31
 8000818:	d506      	bpl.n	8000828 <__swbuf_r+0x6c>
 800081a:	2e0a      	cmp	r6, #10
 800081c:	d104      	bne.n	8000828 <__swbuf_r+0x6c>
 800081e:	4621      	mov	r1, r4
 8000820:	4628      	mov	r0, r5
 8000822:	f000 f911 	bl	8000a48 <_fflush_r>
 8000826:	b988      	cbnz	r0, 800084c <__swbuf_r+0x90>
 8000828:	4638      	mov	r0, r7
 800082a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800082c:	4b0a      	ldr	r3, [pc, #40]	; (8000858 <__swbuf_r+0x9c>)
 800082e:	429c      	cmp	r4, r3
 8000830:	d101      	bne.n	8000836 <__swbuf_r+0x7a>
 8000832:	68ac      	ldr	r4, [r5, #8]
 8000834:	e7cf      	b.n	80007d6 <__swbuf_r+0x1a>
 8000836:	4b09      	ldr	r3, [pc, #36]	; (800085c <__swbuf_r+0xa0>)
 8000838:	429c      	cmp	r4, r3
 800083a:	bf08      	it	eq
 800083c:	68ec      	ldreq	r4, [r5, #12]
 800083e:	e7ca      	b.n	80007d6 <__swbuf_r+0x1a>
 8000840:	4621      	mov	r1, r4
 8000842:	4628      	mov	r0, r5
 8000844:	f000 f80c 	bl	8000860 <__swsetup_r>
 8000848:	2800      	cmp	r0, #0
 800084a:	d0cb      	beq.n	80007e4 <__swbuf_r+0x28>
 800084c:	f04f 37ff 	mov.w	r7, #4294967295
 8000850:	e7ea      	b.n	8000828 <__swbuf_r+0x6c>
 8000852:	bf00      	nop
 8000854:	08001150 	.word	0x08001150
 8000858:	08001170 	.word	0x08001170
 800085c:	08001130 	.word	0x08001130

08000860 <__swsetup_r>:
 8000860:	4b32      	ldr	r3, [pc, #200]	; (800092c <__swsetup_r+0xcc>)
 8000862:	b570      	push	{r4, r5, r6, lr}
 8000864:	681d      	ldr	r5, [r3, #0]
 8000866:	4606      	mov	r6, r0
 8000868:	460c      	mov	r4, r1
 800086a:	b125      	cbz	r5, 8000876 <__swsetup_r+0x16>
 800086c:	69ab      	ldr	r3, [r5, #24]
 800086e:	b913      	cbnz	r3, 8000876 <__swsetup_r+0x16>
 8000870:	4628      	mov	r0, r5
 8000872:	f000 f97d 	bl	8000b70 <__sinit>
 8000876:	4b2e      	ldr	r3, [pc, #184]	; (8000930 <__swsetup_r+0xd0>)
 8000878:	429c      	cmp	r4, r3
 800087a:	d10f      	bne.n	800089c <__swsetup_r+0x3c>
 800087c:	686c      	ldr	r4, [r5, #4]
 800087e:	89a3      	ldrh	r3, [r4, #12]
 8000880:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000884:	0719      	lsls	r1, r3, #28
 8000886:	d42c      	bmi.n	80008e2 <__swsetup_r+0x82>
 8000888:	06dd      	lsls	r5, r3, #27
 800088a:	d411      	bmi.n	80008b0 <__swsetup_r+0x50>
 800088c:	2309      	movs	r3, #9
 800088e:	6033      	str	r3, [r6, #0]
 8000890:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000894:	81a3      	strh	r3, [r4, #12]
 8000896:	f04f 30ff 	mov.w	r0, #4294967295
 800089a:	e03e      	b.n	800091a <__swsetup_r+0xba>
 800089c:	4b25      	ldr	r3, [pc, #148]	; (8000934 <__swsetup_r+0xd4>)
 800089e:	429c      	cmp	r4, r3
 80008a0:	d101      	bne.n	80008a6 <__swsetup_r+0x46>
 80008a2:	68ac      	ldr	r4, [r5, #8]
 80008a4:	e7eb      	b.n	800087e <__swsetup_r+0x1e>
 80008a6:	4b24      	ldr	r3, [pc, #144]	; (8000938 <__swsetup_r+0xd8>)
 80008a8:	429c      	cmp	r4, r3
 80008aa:	bf08      	it	eq
 80008ac:	68ec      	ldreq	r4, [r5, #12]
 80008ae:	e7e6      	b.n	800087e <__swsetup_r+0x1e>
 80008b0:	0758      	lsls	r0, r3, #29
 80008b2:	d512      	bpl.n	80008da <__swsetup_r+0x7a>
 80008b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80008b6:	b141      	cbz	r1, 80008ca <__swsetup_r+0x6a>
 80008b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80008bc:	4299      	cmp	r1, r3
 80008be:	d002      	beq.n	80008c6 <__swsetup_r+0x66>
 80008c0:	4630      	mov	r0, r6
 80008c2:	f000 fa5b 	bl	8000d7c <_free_r>
 80008c6:	2300      	movs	r3, #0
 80008c8:	6363      	str	r3, [r4, #52]	; 0x34
 80008ca:	89a3      	ldrh	r3, [r4, #12]
 80008cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80008d0:	81a3      	strh	r3, [r4, #12]
 80008d2:	2300      	movs	r3, #0
 80008d4:	6063      	str	r3, [r4, #4]
 80008d6:	6923      	ldr	r3, [r4, #16]
 80008d8:	6023      	str	r3, [r4, #0]
 80008da:	89a3      	ldrh	r3, [r4, #12]
 80008dc:	f043 0308 	orr.w	r3, r3, #8
 80008e0:	81a3      	strh	r3, [r4, #12]
 80008e2:	6923      	ldr	r3, [r4, #16]
 80008e4:	b94b      	cbnz	r3, 80008fa <__swsetup_r+0x9a>
 80008e6:	89a3      	ldrh	r3, [r4, #12]
 80008e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80008ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80008f0:	d003      	beq.n	80008fa <__swsetup_r+0x9a>
 80008f2:	4621      	mov	r1, r4
 80008f4:	4630      	mov	r0, r6
 80008f6:	f000 fa01 	bl	8000cfc <__smakebuf_r>
 80008fa:	89a0      	ldrh	r0, [r4, #12]
 80008fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000900:	f010 0301 	ands.w	r3, r0, #1
 8000904:	d00a      	beq.n	800091c <__swsetup_r+0xbc>
 8000906:	2300      	movs	r3, #0
 8000908:	60a3      	str	r3, [r4, #8]
 800090a:	6963      	ldr	r3, [r4, #20]
 800090c:	425b      	negs	r3, r3
 800090e:	61a3      	str	r3, [r4, #24]
 8000910:	6923      	ldr	r3, [r4, #16]
 8000912:	b943      	cbnz	r3, 8000926 <__swsetup_r+0xc6>
 8000914:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000918:	d1ba      	bne.n	8000890 <__swsetup_r+0x30>
 800091a:	bd70      	pop	{r4, r5, r6, pc}
 800091c:	0781      	lsls	r1, r0, #30
 800091e:	bf58      	it	pl
 8000920:	6963      	ldrpl	r3, [r4, #20]
 8000922:	60a3      	str	r3, [r4, #8]
 8000924:	e7f4      	b.n	8000910 <__swsetup_r+0xb0>
 8000926:	2000      	movs	r0, #0
 8000928:	e7f7      	b.n	800091a <__swsetup_r+0xba>
 800092a:	bf00      	nop
 800092c:	20000000 	.word	0x20000000
 8000930:	08001150 	.word	0x08001150
 8000934:	08001170 	.word	0x08001170
 8000938:	08001130 	.word	0x08001130

0800093c <__sflush_r>:
 800093c:	898a      	ldrh	r2, [r1, #12]
 800093e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000942:	4605      	mov	r5, r0
 8000944:	0710      	lsls	r0, r2, #28
 8000946:	460c      	mov	r4, r1
 8000948:	d458      	bmi.n	80009fc <__sflush_r+0xc0>
 800094a:	684b      	ldr	r3, [r1, #4]
 800094c:	2b00      	cmp	r3, #0
 800094e:	dc05      	bgt.n	800095c <__sflush_r+0x20>
 8000950:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000952:	2b00      	cmp	r3, #0
 8000954:	dc02      	bgt.n	800095c <__sflush_r+0x20>
 8000956:	2000      	movs	r0, #0
 8000958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800095c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800095e:	2e00      	cmp	r6, #0
 8000960:	d0f9      	beq.n	8000956 <__sflush_r+0x1a>
 8000962:	2300      	movs	r3, #0
 8000964:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000968:	682f      	ldr	r7, [r5, #0]
 800096a:	602b      	str	r3, [r5, #0]
 800096c:	d032      	beq.n	80009d4 <__sflush_r+0x98>
 800096e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000970:	89a3      	ldrh	r3, [r4, #12]
 8000972:	075a      	lsls	r2, r3, #29
 8000974:	d505      	bpl.n	8000982 <__sflush_r+0x46>
 8000976:	6863      	ldr	r3, [r4, #4]
 8000978:	1ac0      	subs	r0, r0, r3
 800097a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800097c:	b10b      	cbz	r3, 8000982 <__sflush_r+0x46>
 800097e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000980:	1ac0      	subs	r0, r0, r3
 8000982:	2300      	movs	r3, #0
 8000984:	4602      	mov	r2, r0
 8000986:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000988:	6a21      	ldr	r1, [r4, #32]
 800098a:	4628      	mov	r0, r5
 800098c:	47b0      	blx	r6
 800098e:	1c43      	adds	r3, r0, #1
 8000990:	89a3      	ldrh	r3, [r4, #12]
 8000992:	d106      	bne.n	80009a2 <__sflush_r+0x66>
 8000994:	6829      	ldr	r1, [r5, #0]
 8000996:	291d      	cmp	r1, #29
 8000998:	d82c      	bhi.n	80009f4 <__sflush_r+0xb8>
 800099a:	4a2a      	ldr	r2, [pc, #168]	; (8000a44 <__sflush_r+0x108>)
 800099c:	40ca      	lsrs	r2, r1
 800099e:	07d6      	lsls	r6, r2, #31
 80009a0:	d528      	bpl.n	80009f4 <__sflush_r+0xb8>
 80009a2:	2200      	movs	r2, #0
 80009a4:	6062      	str	r2, [r4, #4]
 80009a6:	04d9      	lsls	r1, r3, #19
 80009a8:	6922      	ldr	r2, [r4, #16]
 80009aa:	6022      	str	r2, [r4, #0]
 80009ac:	d504      	bpl.n	80009b8 <__sflush_r+0x7c>
 80009ae:	1c42      	adds	r2, r0, #1
 80009b0:	d101      	bne.n	80009b6 <__sflush_r+0x7a>
 80009b2:	682b      	ldr	r3, [r5, #0]
 80009b4:	b903      	cbnz	r3, 80009b8 <__sflush_r+0x7c>
 80009b6:	6560      	str	r0, [r4, #84]	; 0x54
 80009b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80009ba:	602f      	str	r7, [r5, #0]
 80009bc:	2900      	cmp	r1, #0
 80009be:	d0ca      	beq.n	8000956 <__sflush_r+0x1a>
 80009c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80009c4:	4299      	cmp	r1, r3
 80009c6:	d002      	beq.n	80009ce <__sflush_r+0x92>
 80009c8:	4628      	mov	r0, r5
 80009ca:	f000 f9d7 	bl	8000d7c <_free_r>
 80009ce:	2000      	movs	r0, #0
 80009d0:	6360      	str	r0, [r4, #52]	; 0x34
 80009d2:	e7c1      	b.n	8000958 <__sflush_r+0x1c>
 80009d4:	6a21      	ldr	r1, [r4, #32]
 80009d6:	2301      	movs	r3, #1
 80009d8:	4628      	mov	r0, r5
 80009da:	47b0      	blx	r6
 80009dc:	1c41      	adds	r1, r0, #1
 80009de:	d1c7      	bne.n	8000970 <__sflush_r+0x34>
 80009e0:	682b      	ldr	r3, [r5, #0]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d0c4      	beq.n	8000970 <__sflush_r+0x34>
 80009e6:	2b1d      	cmp	r3, #29
 80009e8:	d001      	beq.n	80009ee <__sflush_r+0xb2>
 80009ea:	2b16      	cmp	r3, #22
 80009ec:	d101      	bne.n	80009f2 <__sflush_r+0xb6>
 80009ee:	602f      	str	r7, [r5, #0]
 80009f0:	e7b1      	b.n	8000956 <__sflush_r+0x1a>
 80009f2:	89a3      	ldrh	r3, [r4, #12]
 80009f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009f8:	81a3      	strh	r3, [r4, #12]
 80009fa:	e7ad      	b.n	8000958 <__sflush_r+0x1c>
 80009fc:	690f      	ldr	r7, [r1, #16]
 80009fe:	2f00      	cmp	r7, #0
 8000a00:	d0a9      	beq.n	8000956 <__sflush_r+0x1a>
 8000a02:	0793      	lsls	r3, r2, #30
 8000a04:	680e      	ldr	r6, [r1, #0]
 8000a06:	bf08      	it	eq
 8000a08:	694b      	ldreq	r3, [r1, #20]
 8000a0a:	600f      	str	r7, [r1, #0]
 8000a0c:	bf18      	it	ne
 8000a0e:	2300      	movne	r3, #0
 8000a10:	eba6 0807 	sub.w	r8, r6, r7
 8000a14:	608b      	str	r3, [r1, #8]
 8000a16:	f1b8 0f00 	cmp.w	r8, #0
 8000a1a:	dd9c      	ble.n	8000956 <__sflush_r+0x1a>
 8000a1c:	6a21      	ldr	r1, [r4, #32]
 8000a1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000a20:	4643      	mov	r3, r8
 8000a22:	463a      	mov	r2, r7
 8000a24:	4628      	mov	r0, r5
 8000a26:	47b0      	blx	r6
 8000a28:	2800      	cmp	r0, #0
 8000a2a:	dc06      	bgt.n	8000a3a <__sflush_r+0xfe>
 8000a2c:	89a3      	ldrh	r3, [r4, #12]
 8000a2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a32:	81a3      	strh	r3, [r4, #12]
 8000a34:	f04f 30ff 	mov.w	r0, #4294967295
 8000a38:	e78e      	b.n	8000958 <__sflush_r+0x1c>
 8000a3a:	4407      	add	r7, r0
 8000a3c:	eba8 0800 	sub.w	r8, r8, r0
 8000a40:	e7e9      	b.n	8000a16 <__sflush_r+0xda>
 8000a42:	bf00      	nop
 8000a44:	20400001 	.word	0x20400001

08000a48 <_fflush_r>:
 8000a48:	b538      	push	{r3, r4, r5, lr}
 8000a4a:	690b      	ldr	r3, [r1, #16]
 8000a4c:	4605      	mov	r5, r0
 8000a4e:	460c      	mov	r4, r1
 8000a50:	b913      	cbnz	r3, 8000a58 <_fflush_r+0x10>
 8000a52:	2500      	movs	r5, #0
 8000a54:	4628      	mov	r0, r5
 8000a56:	bd38      	pop	{r3, r4, r5, pc}
 8000a58:	b118      	cbz	r0, 8000a62 <_fflush_r+0x1a>
 8000a5a:	6983      	ldr	r3, [r0, #24]
 8000a5c:	b90b      	cbnz	r3, 8000a62 <_fflush_r+0x1a>
 8000a5e:	f000 f887 	bl	8000b70 <__sinit>
 8000a62:	4b14      	ldr	r3, [pc, #80]	; (8000ab4 <_fflush_r+0x6c>)
 8000a64:	429c      	cmp	r4, r3
 8000a66:	d11b      	bne.n	8000aa0 <_fflush_r+0x58>
 8000a68:	686c      	ldr	r4, [r5, #4]
 8000a6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d0ef      	beq.n	8000a52 <_fflush_r+0xa>
 8000a72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000a74:	07d0      	lsls	r0, r2, #31
 8000a76:	d404      	bmi.n	8000a82 <_fflush_r+0x3a>
 8000a78:	0599      	lsls	r1, r3, #22
 8000a7a:	d402      	bmi.n	8000a82 <_fflush_r+0x3a>
 8000a7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000a7e:	f000 f915 	bl	8000cac <__retarget_lock_acquire_recursive>
 8000a82:	4628      	mov	r0, r5
 8000a84:	4621      	mov	r1, r4
 8000a86:	f7ff ff59 	bl	800093c <__sflush_r>
 8000a8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000a8c:	07da      	lsls	r2, r3, #31
 8000a8e:	4605      	mov	r5, r0
 8000a90:	d4e0      	bmi.n	8000a54 <_fflush_r+0xc>
 8000a92:	89a3      	ldrh	r3, [r4, #12]
 8000a94:	059b      	lsls	r3, r3, #22
 8000a96:	d4dd      	bmi.n	8000a54 <_fflush_r+0xc>
 8000a98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000a9a:	f000 f908 	bl	8000cae <__retarget_lock_release_recursive>
 8000a9e:	e7d9      	b.n	8000a54 <_fflush_r+0xc>
 8000aa0:	4b05      	ldr	r3, [pc, #20]	; (8000ab8 <_fflush_r+0x70>)
 8000aa2:	429c      	cmp	r4, r3
 8000aa4:	d101      	bne.n	8000aaa <_fflush_r+0x62>
 8000aa6:	68ac      	ldr	r4, [r5, #8]
 8000aa8:	e7df      	b.n	8000a6a <_fflush_r+0x22>
 8000aaa:	4b04      	ldr	r3, [pc, #16]	; (8000abc <_fflush_r+0x74>)
 8000aac:	429c      	cmp	r4, r3
 8000aae:	bf08      	it	eq
 8000ab0:	68ec      	ldreq	r4, [r5, #12]
 8000ab2:	e7da      	b.n	8000a6a <_fflush_r+0x22>
 8000ab4:	08001150 	.word	0x08001150
 8000ab8:	08001170 	.word	0x08001170
 8000abc:	08001130 	.word	0x08001130

08000ac0 <std>:
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	b510      	push	{r4, lr}
 8000ac4:	4604      	mov	r4, r0
 8000ac6:	e9c0 3300 	strd	r3, r3, [r0]
 8000aca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000ace:	6083      	str	r3, [r0, #8]
 8000ad0:	8181      	strh	r1, [r0, #12]
 8000ad2:	6643      	str	r3, [r0, #100]	; 0x64
 8000ad4:	81c2      	strh	r2, [r0, #14]
 8000ad6:	6183      	str	r3, [r0, #24]
 8000ad8:	4619      	mov	r1, r3
 8000ada:	2208      	movs	r2, #8
 8000adc:	305c      	adds	r0, #92	; 0x5c
 8000ade:	f7ff fdef 	bl	80006c0 <memset>
 8000ae2:	4b05      	ldr	r3, [pc, #20]	; (8000af8 <std+0x38>)
 8000ae4:	6263      	str	r3, [r4, #36]	; 0x24
 8000ae6:	4b05      	ldr	r3, [pc, #20]	; (8000afc <std+0x3c>)
 8000ae8:	62a3      	str	r3, [r4, #40]	; 0x28
 8000aea:	4b05      	ldr	r3, [pc, #20]	; (8000b00 <std+0x40>)
 8000aec:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000aee:	4b05      	ldr	r3, [pc, #20]	; (8000b04 <std+0x44>)
 8000af0:	6224      	str	r4, [r4, #32]
 8000af2:	6323      	str	r3, [r4, #48]	; 0x30
 8000af4:	bd10      	pop	{r4, pc}
 8000af6:	bf00      	nop
 8000af8:	08000f5d 	.word	0x08000f5d
 8000afc:	08000f7f 	.word	0x08000f7f
 8000b00:	08000fb7 	.word	0x08000fb7
 8000b04:	08000fdb 	.word	0x08000fdb

08000b08 <_cleanup_r>:
 8000b08:	4901      	ldr	r1, [pc, #4]	; (8000b10 <_cleanup_r+0x8>)
 8000b0a:	f000 b8af 	b.w	8000c6c <_fwalk_reent>
 8000b0e:	bf00      	nop
 8000b10:	08000a49 	.word	0x08000a49

08000b14 <__sfmoreglue>:
 8000b14:	b570      	push	{r4, r5, r6, lr}
 8000b16:	2268      	movs	r2, #104	; 0x68
 8000b18:	1e4d      	subs	r5, r1, #1
 8000b1a:	4355      	muls	r5, r2
 8000b1c:	460e      	mov	r6, r1
 8000b1e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000b22:	f000 f997 	bl	8000e54 <_malloc_r>
 8000b26:	4604      	mov	r4, r0
 8000b28:	b140      	cbz	r0, 8000b3c <__sfmoreglue+0x28>
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	e9c0 1600 	strd	r1, r6, [r0]
 8000b30:	300c      	adds	r0, #12
 8000b32:	60a0      	str	r0, [r4, #8]
 8000b34:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000b38:	f7ff fdc2 	bl	80006c0 <memset>
 8000b3c:	4620      	mov	r0, r4
 8000b3e:	bd70      	pop	{r4, r5, r6, pc}

08000b40 <__sfp_lock_acquire>:
 8000b40:	4801      	ldr	r0, [pc, #4]	; (8000b48 <__sfp_lock_acquire+0x8>)
 8000b42:	f000 b8b3 	b.w	8000cac <__retarget_lock_acquire_recursive>
 8000b46:	bf00      	nop
 8000b48:	20000085 	.word	0x20000085

08000b4c <__sfp_lock_release>:
 8000b4c:	4801      	ldr	r0, [pc, #4]	; (8000b54 <__sfp_lock_release+0x8>)
 8000b4e:	f000 b8ae 	b.w	8000cae <__retarget_lock_release_recursive>
 8000b52:	bf00      	nop
 8000b54:	20000085 	.word	0x20000085

08000b58 <__sinit_lock_acquire>:
 8000b58:	4801      	ldr	r0, [pc, #4]	; (8000b60 <__sinit_lock_acquire+0x8>)
 8000b5a:	f000 b8a7 	b.w	8000cac <__retarget_lock_acquire_recursive>
 8000b5e:	bf00      	nop
 8000b60:	20000086 	.word	0x20000086

08000b64 <__sinit_lock_release>:
 8000b64:	4801      	ldr	r0, [pc, #4]	; (8000b6c <__sinit_lock_release+0x8>)
 8000b66:	f000 b8a2 	b.w	8000cae <__retarget_lock_release_recursive>
 8000b6a:	bf00      	nop
 8000b6c:	20000086 	.word	0x20000086

08000b70 <__sinit>:
 8000b70:	b510      	push	{r4, lr}
 8000b72:	4604      	mov	r4, r0
 8000b74:	f7ff fff0 	bl	8000b58 <__sinit_lock_acquire>
 8000b78:	69a3      	ldr	r3, [r4, #24]
 8000b7a:	b11b      	cbz	r3, 8000b84 <__sinit+0x14>
 8000b7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b80:	f7ff bff0 	b.w	8000b64 <__sinit_lock_release>
 8000b84:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000b88:	6523      	str	r3, [r4, #80]	; 0x50
 8000b8a:	4b13      	ldr	r3, [pc, #76]	; (8000bd8 <__sinit+0x68>)
 8000b8c:	4a13      	ldr	r2, [pc, #76]	; (8000bdc <__sinit+0x6c>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	62a2      	str	r2, [r4, #40]	; 0x28
 8000b92:	42a3      	cmp	r3, r4
 8000b94:	bf04      	itt	eq
 8000b96:	2301      	moveq	r3, #1
 8000b98:	61a3      	streq	r3, [r4, #24]
 8000b9a:	4620      	mov	r0, r4
 8000b9c:	f000 f820 	bl	8000be0 <__sfp>
 8000ba0:	6060      	str	r0, [r4, #4]
 8000ba2:	4620      	mov	r0, r4
 8000ba4:	f000 f81c 	bl	8000be0 <__sfp>
 8000ba8:	60a0      	str	r0, [r4, #8]
 8000baa:	4620      	mov	r0, r4
 8000bac:	f000 f818 	bl	8000be0 <__sfp>
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	60e0      	str	r0, [r4, #12]
 8000bb4:	2104      	movs	r1, #4
 8000bb6:	6860      	ldr	r0, [r4, #4]
 8000bb8:	f7ff ff82 	bl	8000ac0 <std>
 8000bbc:	68a0      	ldr	r0, [r4, #8]
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	2109      	movs	r1, #9
 8000bc2:	f7ff ff7d 	bl	8000ac0 <std>
 8000bc6:	68e0      	ldr	r0, [r4, #12]
 8000bc8:	2202      	movs	r2, #2
 8000bca:	2112      	movs	r1, #18
 8000bcc:	f7ff ff78 	bl	8000ac0 <std>
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	61a3      	str	r3, [r4, #24]
 8000bd4:	e7d2      	b.n	8000b7c <__sinit+0xc>
 8000bd6:	bf00      	nop
 8000bd8:	0800112c 	.word	0x0800112c
 8000bdc:	08000b09 	.word	0x08000b09

08000be0 <__sfp>:
 8000be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000be2:	4607      	mov	r7, r0
 8000be4:	f7ff ffac 	bl	8000b40 <__sfp_lock_acquire>
 8000be8:	4b1e      	ldr	r3, [pc, #120]	; (8000c64 <__sfp+0x84>)
 8000bea:	681e      	ldr	r6, [r3, #0]
 8000bec:	69b3      	ldr	r3, [r6, #24]
 8000bee:	b913      	cbnz	r3, 8000bf6 <__sfp+0x16>
 8000bf0:	4630      	mov	r0, r6
 8000bf2:	f7ff ffbd 	bl	8000b70 <__sinit>
 8000bf6:	3648      	adds	r6, #72	; 0x48
 8000bf8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000bfc:	3b01      	subs	r3, #1
 8000bfe:	d503      	bpl.n	8000c08 <__sfp+0x28>
 8000c00:	6833      	ldr	r3, [r6, #0]
 8000c02:	b30b      	cbz	r3, 8000c48 <__sfp+0x68>
 8000c04:	6836      	ldr	r6, [r6, #0]
 8000c06:	e7f7      	b.n	8000bf8 <__sfp+0x18>
 8000c08:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000c0c:	b9d5      	cbnz	r5, 8000c44 <__sfp+0x64>
 8000c0e:	4b16      	ldr	r3, [pc, #88]	; (8000c68 <__sfp+0x88>)
 8000c10:	60e3      	str	r3, [r4, #12]
 8000c12:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000c16:	6665      	str	r5, [r4, #100]	; 0x64
 8000c18:	f000 f847 	bl	8000caa <__retarget_lock_init_recursive>
 8000c1c:	f7ff ff96 	bl	8000b4c <__sfp_lock_release>
 8000c20:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000c24:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000c28:	6025      	str	r5, [r4, #0]
 8000c2a:	61a5      	str	r5, [r4, #24]
 8000c2c:	2208      	movs	r2, #8
 8000c2e:	4629      	mov	r1, r5
 8000c30:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000c34:	f7ff fd44 	bl	80006c0 <memset>
 8000c38:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000c3c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000c40:	4620      	mov	r0, r4
 8000c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c44:	3468      	adds	r4, #104	; 0x68
 8000c46:	e7d9      	b.n	8000bfc <__sfp+0x1c>
 8000c48:	2104      	movs	r1, #4
 8000c4a:	4638      	mov	r0, r7
 8000c4c:	f7ff ff62 	bl	8000b14 <__sfmoreglue>
 8000c50:	4604      	mov	r4, r0
 8000c52:	6030      	str	r0, [r6, #0]
 8000c54:	2800      	cmp	r0, #0
 8000c56:	d1d5      	bne.n	8000c04 <__sfp+0x24>
 8000c58:	f7ff ff78 	bl	8000b4c <__sfp_lock_release>
 8000c5c:	230c      	movs	r3, #12
 8000c5e:	603b      	str	r3, [r7, #0]
 8000c60:	e7ee      	b.n	8000c40 <__sfp+0x60>
 8000c62:	bf00      	nop
 8000c64:	0800112c 	.word	0x0800112c
 8000c68:	ffff0001 	.word	0xffff0001

08000c6c <_fwalk_reent>:
 8000c6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c70:	4606      	mov	r6, r0
 8000c72:	4688      	mov	r8, r1
 8000c74:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000c78:	2700      	movs	r7, #0
 8000c7a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000c7e:	f1b9 0901 	subs.w	r9, r9, #1
 8000c82:	d505      	bpl.n	8000c90 <_fwalk_reent+0x24>
 8000c84:	6824      	ldr	r4, [r4, #0]
 8000c86:	2c00      	cmp	r4, #0
 8000c88:	d1f7      	bne.n	8000c7a <_fwalk_reent+0xe>
 8000c8a:	4638      	mov	r0, r7
 8000c8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c90:	89ab      	ldrh	r3, [r5, #12]
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d907      	bls.n	8000ca6 <_fwalk_reent+0x3a>
 8000c96:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	d003      	beq.n	8000ca6 <_fwalk_reent+0x3a>
 8000c9e:	4629      	mov	r1, r5
 8000ca0:	4630      	mov	r0, r6
 8000ca2:	47c0      	blx	r8
 8000ca4:	4307      	orrs	r7, r0
 8000ca6:	3568      	adds	r5, #104	; 0x68
 8000ca8:	e7e9      	b.n	8000c7e <_fwalk_reent+0x12>

08000caa <__retarget_lock_init_recursive>:
 8000caa:	4770      	bx	lr

08000cac <__retarget_lock_acquire_recursive>:
 8000cac:	4770      	bx	lr

08000cae <__retarget_lock_release_recursive>:
 8000cae:	4770      	bx	lr

08000cb0 <__swhatbuf_r>:
 8000cb0:	b570      	push	{r4, r5, r6, lr}
 8000cb2:	460e      	mov	r6, r1
 8000cb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000cb8:	2900      	cmp	r1, #0
 8000cba:	b096      	sub	sp, #88	; 0x58
 8000cbc:	4614      	mov	r4, r2
 8000cbe:	461d      	mov	r5, r3
 8000cc0:	da08      	bge.n	8000cd4 <__swhatbuf_r+0x24>
 8000cc2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	602a      	str	r2, [r5, #0]
 8000cca:	061a      	lsls	r2, r3, #24
 8000ccc:	d410      	bmi.n	8000cf0 <__swhatbuf_r+0x40>
 8000cce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cd2:	e00e      	b.n	8000cf2 <__swhatbuf_r+0x42>
 8000cd4:	466a      	mov	r2, sp
 8000cd6:	f000 f9a7 	bl	8001028 <_fstat_r>
 8000cda:	2800      	cmp	r0, #0
 8000cdc:	dbf1      	blt.n	8000cc2 <__swhatbuf_r+0x12>
 8000cde:	9a01      	ldr	r2, [sp, #4]
 8000ce0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000ce4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000ce8:	425a      	negs	r2, r3
 8000cea:	415a      	adcs	r2, r3
 8000cec:	602a      	str	r2, [r5, #0]
 8000cee:	e7ee      	b.n	8000cce <__swhatbuf_r+0x1e>
 8000cf0:	2340      	movs	r3, #64	; 0x40
 8000cf2:	2000      	movs	r0, #0
 8000cf4:	6023      	str	r3, [r4, #0]
 8000cf6:	b016      	add	sp, #88	; 0x58
 8000cf8:	bd70      	pop	{r4, r5, r6, pc}
	...

08000cfc <__smakebuf_r>:
 8000cfc:	898b      	ldrh	r3, [r1, #12]
 8000cfe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000d00:	079d      	lsls	r5, r3, #30
 8000d02:	4606      	mov	r6, r0
 8000d04:	460c      	mov	r4, r1
 8000d06:	d507      	bpl.n	8000d18 <__smakebuf_r+0x1c>
 8000d08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000d0c:	6023      	str	r3, [r4, #0]
 8000d0e:	6123      	str	r3, [r4, #16]
 8000d10:	2301      	movs	r3, #1
 8000d12:	6163      	str	r3, [r4, #20]
 8000d14:	b002      	add	sp, #8
 8000d16:	bd70      	pop	{r4, r5, r6, pc}
 8000d18:	ab01      	add	r3, sp, #4
 8000d1a:	466a      	mov	r2, sp
 8000d1c:	f7ff ffc8 	bl	8000cb0 <__swhatbuf_r>
 8000d20:	9900      	ldr	r1, [sp, #0]
 8000d22:	4605      	mov	r5, r0
 8000d24:	4630      	mov	r0, r6
 8000d26:	f000 f895 	bl	8000e54 <_malloc_r>
 8000d2a:	b948      	cbnz	r0, 8000d40 <__smakebuf_r+0x44>
 8000d2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d30:	059a      	lsls	r2, r3, #22
 8000d32:	d4ef      	bmi.n	8000d14 <__smakebuf_r+0x18>
 8000d34:	f023 0303 	bic.w	r3, r3, #3
 8000d38:	f043 0302 	orr.w	r3, r3, #2
 8000d3c:	81a3      	strh	r3, [r4, #12]
 8000d3e:	e7e3      	b.n	8000d08 <__smakebuf_r+0xc>
 8000d40:	4b0d      	ldr	r3, [pc, #52]	; (8000d78 <__smakebuf_r+0x7c>)
 8000d42:	62b3      	str	r3, [r6, #40]	; 0x28
 8000d44:	89a3      	ldrh	r3, [r4, #12]
 8000d46:	6020      	str	r0, [r4, #0]
 8000d48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d4c:	81a3      	strh	r3, [r4, #12]
 8000d4e:	9b00      	ldr	r3, [sp, #0]
 8000d50:	6163      	str	r3, [r4, #20]
 8000d52:	9b01      	ldr	r3, [sp, #4]
 8000d54:	6120      	str	r0, [r4, #16]
 8000d56:	b15b      	cbz	r3, 8000d70 <__smakebuf_r+0x74>
 8000d58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	f000 f975 	bl	800104c <_isatty_r>
 8000d62:	b128      	cbz	r0, 8000d70 <__smakebuf_r+0x74>
 8000d64:	89a3      	ldrh	r3, [r4, #12]
 8000d66:	f023 0303 	bic.w	r3, r3, #3
 8000d6a:	f043 0301 	orr.w	r3, r3, #1
 8000d6e:	81a3      	strh	r3, [r4, #12]
 8000d70:	89a0      	ldrh	r0, [r4, #12]
 8000d72:	4305      	orrs	r5, r0
 8000d74:	81a5      	strh	r5, [r4, #12]
 8000d76:	e7cd      	b.n	8000d14 <__smakebuf_r+0x18>
 8000d78:	08000b09 	.word	0x08000b09

08000d7c <_free_r>:
 8000d7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000d7e:	2900      	cmp	r1, #0
 8000d80:	d044      	beq.n	8000e0c <_free_r+0x90>
 8000d82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000d86:	9001      	str	r0, [sp, #4]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	f1a1 0404 	sub.w	r4, r1, #4
 8000d8e:	bfb8      	it	lt
 8000d90:	18e4      	addlt	r4, r4, r3
 8000d92:	f000 f97d 	bl	8001090 <__malloc_lock>
 8000d96:	4a1e      	ldr	r2, [pc, #120]	; (8000e10 <_free_r+0x94>)
 8000d98:	9801      	ldr	r0, [sp, #4]
 8000d9a:	6813      	ldr	r3, [r2, #0]
 8000d9c:	b933      	cbnz	r3, 8000dac <_free_r+0x30>
 8000d9e:	6063      	str	r3, [r4, #4]
 8000da0:	6014      	str	r4, [r2, #0]
 8000da2:	b003      	add	sp, #12
 8000da4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000da8:	f000 b978 	b.w	800109c <__malloc_unlock>
 8000dac:	42a3      	cmp	r3, r4
 8000dae:	d908      	bls.n	8000dc2 <_free_r+0x46>
 8000db0:	6825      	ldr	r5, [r4, #0]
 8000db2:	1961      	adds	r1, r4, r5
 8000db4:	428b      	cmp	r3, r1
 8000db6:	bf01      	itttt	eq
 8000db8:	6819      	ldreq	r1, [r3, #0]
 8000dba:	685b      	ldreq	r3, [r3, #4]
 8000dbc:	1949      	addeq	r1, r1, r5
 8000dbe:	6021      	streq	r1, [r4, #0]
 8000dc0:	e7ed      	b.n	8000d9e <_free_r+0x22>
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	b10b      	cbz	r3, 8000dcc <_free_r+0x50>
 8000dc8:	42a3      	cmp	r3, r4
 8000dca:	d9fa      	bls.n	8000dc2 <_free_r+0x46>
 8000dcc:	6811      	ldr	r1, [r2, #0]
 8000dce:	1855      	adds	r5, r2, r1
 8000dd0:	42a5      	cmp	r5, r4
 8000dd2:	d10b      	bne.n	8000dec <_free_r+0x70>
 8000dd4:	6824      	ldr	r4, [r4, #0]
 8000dd6:	4421      	add	r1, r4
 8000dd8:	1854      	adds	r4, r2, r1
 8000dda:	42a3      	cmp	r3, r4
 8000ddc:	6011      	str	r1, [r2, #0]
 8000dde:	d1e0      	bne.n	8000da2 <_free_r+0x26>
 8000de0:	681c      	ldr	r4, [r3, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	6053      	str	r3, [r2, #4]
 8000de6:	4421      	add	r1, r4
 8000de8:	6011      	str	r1, [r2, #0]
 8000dea:	e7da      	b.n	8000da2 <_free_r+0x26>
 8000dec:	d902      	bls.n	8000df4 <_free_r+0x78>
 8000dee:	230c      	movs	r3, #12
 8000df0:	6003      	str	r3, [r0, #0]
 8000df2:	e7d6      	b.n	8000da2 <_free_r+0x26>
 8000df4:	6825      	ldr	r5, [r4, #0]
 8000df6:	1961      	adds	r1, r4, r5
 8000df8:	428b      	cmp	r3, r1
 8000dfa:	bf04      	itt	eq
 8000dfc:	6819      	ldreq	r1, [r3, #0]
 8000dfe:	685b      	ldreq	r3, [r3, #4]
 8000e00:	6063      	str	r3, [r4, #4]
 8000e02:	bf04      	itt	eq
 8000e04:	1949      	addeq	r1, r1, r5
 8000e06:	6021      	streq	r1, [r4, #0]
 8000e08:	6054      	str	r4, [r2, #4]
 8000e0a:	e7ca      	b.n	8000da2 <_free_r+0x26>
 8000e0c:	b003      	add	sp, #12
 8000e0e:	bd30      	pop	{r4, r5, pc}
 8000e10:	20000088 	.word	0x20000088

08000e14 <sbrk_aligned>:
 8000e14:	b570      	push	{r4, r5, r6, lr}
 8000e16:	4e0e      	ldr	r6, [pc, #56]	; (8000e50 <sbrk_aligned+0x3c>)
 8000e18:	460c      	mov	r4, r1
 8000e1a:	6831      	ldr	r1, [r6, #0]
 8000e1c:	4605      	mov	r5, r0
 8000e1e:	b911      	cbnz	r1, 8000e26 <sbrk_aligned+0x12>
 8000e20:	f000 f88c 	bl	8000f3c <_sbrk_r>
 8000e24:	6030      	str	r0, [r6, #0]
 8000e26:	4621      	mov	r1, r4
 8000e28:	4628      	mov	r0, r5
 8000e2a:	f000 f887 	bl	8000f3c <_sbrk_r>
 8000e2e:	1c43      	adds	r3, r0, #1
 8000e30:	d00a      	beq.n	8000e48 <sbrk_aligned+0x34>
 8000e32:	1cc4      	adds	r4, r0, #3
 8000e34:	f024 0403 	bic.w	r4, r4, #3
 8000e38:	42a0      	cmp	r0, r4
 8000e3a:	d007      	beq.n	8000e4c <sbrk_aligned+0x38>
 8000e3c:	1a21      	subs	r1, r4, r0
 8000e3e:	4628      	mov	r0, r5
 8000e40:	f000 f87c 	bl	8000f3c <_sbrk_r>
 8000e44:	3001      	adds	r0, #1
 8000e46:	d101      	bne.n	8000e4c <sbrk_aligned+0x38>
 8000e48:	f04f 34ff 	mov.w	r4, #4294967295
 8000e4c:	4620      	mov	r0, r4
 8000e4e:	bd70      	pop	{r4, r5, r6, pc}
 8000e50:	2000008c 	.word	0x2000008c

08000e54 <_malloc_r>:
 8000e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e58:	1ccd      	adds	r5, r1, #3
 8000e5a:	f025 0503 	bic.w	r5, r5, #3
 8000e5e:	3508      	adds	r5, #8
 8000e60:	2d0c      	cmp	r5, #12
 8000e62:	bf38      	it	cc
 8000e64:	250c      	movcc	r5, #12
 8000e66:	2d00      	cmp	r5, #0
 8000e68:	4607      	mov	r7, r0
 8000e6a:	db01      	blt.n	8000e70 <_malloc_r+0x1c>
 8000e6c:	42a9      	cmp	r1, r5
 8000e6e:	d905      	bls.n	8000e7c <_malloc_r+0x28>
 8000e70:	230c      	movs	r3, #12
 8000e72:	603b      	str	r3, [r7, #0]
 8000e74:	2600      	movs	r6, #0
 8000e76:	4630      	mov	r0, r6
 8000e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000e7c:	4e2e      	ldr	r6, [pc, #184]	; (8000f38 <_malloc_r+0xe4>)
 8000e7e:	f000 f907 	bl	8001090 <__malloc_lock>
 8000e82:	6833      	ldr	r3, [r6, #0]
 8000e84:	461c      	mov	r4, r3
 8000e86:	bb34      	cbnz	r4, 8000ed6 <_malloc_r+0x82>
 8000e88:	4629      	mov	r1, r5
 8000e8a:	4638      	mov	r0, r7
 8000e8c:	f7ff ffc2 	bl	8000e14 <sbrk_aligned>
 8000e90:	1c43      	adds	r3, r0, #1
 8000e92:	4604      	mov	r4, r0
 8000e94:	d14d      	bne.n	8000f32 <_malloc_r+0xde>
 8000e96:	6834      	ldr	r4, [r6, #0]
 8000e98:	4626      	mov	r6, r4
 8000e9a:	2e00      	cmp	r6, #0
 8000e9c:	d140      	bne.n	8000f20 <_malloc_r+0xcc>
 8000e9e:	6823      	ldr	r3, [r4, #0]
 8000ea0:	4631      	mov	r1, r6
 8000ea2:	4638      	mov	r0, r7
 8000ea4:	eb04 0803 	add.w	r8, r4, r3
 8000ea8:	f000 f848 	bl	8000f3c <_sbrk_r>
 8000eac:	4580      	cmp	r8, r0
 8000eae:	d13a      	bne.n	8000f26 <_malloc_r+0xd2>
 8000eb0:	6821      	ldr	r1, [r4, #0]
 8000eb2:	3503      	adds	r5, #3
 8000eb4:	1a6d      	subs	r5, r5, r1
 8000eb6:	f025 0503 	bic.w	r5, r5, #3
 8000eba:	3508      	adds	r5, #8
 8000ebc:	2d0c      	cmp	r5, #12
 8000ebe:	bf38      	it	cc
 8000ec0:	250c      	movcc	r5, #12
 8000ec2:	4629      	mov	r1, r5
 8000ec4:	4638      	mov	r0, r7
 8000ec6:	f7ff ffa5 	bl	8000e14 <sbrk_aligned>
 8000eca:	3001      	adds	r0, #1
 8000ecc:	d02b      	beq.n	8000f26 <_malloc_r+0xd2>
 8000ece:	6823      	ldr	r3, [r4, #0]
 8000ed0:	442b      	add	r3, r5
 8000ed2:	6023      	str	r3, [r4, #0]
 8000ed4:	e00e      	b.n	8000ef4 <_malloc_r+0xa0>
 8000ed6:	6822      	ldr	r2, [r4, #0]
 8000ed8:	1b52      	subs	r2, r2, r5
 8000eda:	d41e      	bmi.n	8000f1a <_malloc_r+0xc6>
 8000edc:	2a0b      	cmp	r2, #11
 8000ede:	d916      	bls.n	8000f0e <_malloc_r+0xba>
 8000ee0:	1961      	adds	r1, r4, r5
 8000ee2:	42a3      	cmp	r3, r4
 8000ee4:	6025      	str	r5, [r4, #0]
 8000ee6:	bf18      	it	ne
 8000ee8:	6059      	strne	r1, [r3, #4]
 8000eea:	6863      	ldr	r3, [r4, #4]
 8000eec:	bf08      	it	eq
 8000eee:	6031      	streq	r1, [r6, #0]
 8000ef0:	5162      	str	r2, [r4, r5]
 8000ef2:	604b      	str	r3, [r1, #4]
 8000ef4:	4638      	mov	r0, r7
 8000ef6:	f104 060b 	add.w	r6, r4, #11
 8000efa:	f000 f8cf 	bl	800109c <__malloc_unlock>
 8000efe:	f026 0607 	bic.w	r6, r6, #7
 8000f02:	1d23      	adds	r3, r4, #4
 8000f04:	1af2      	subs	r2, r6, r3
 8000f06:	d0b6      	beq.n	8000e76 <_malloc_r+0x22>
 8000f08:	1b9b      	subs	r3, r3, r6
 8000f0a:	50a3      	str	r3, [r4, r2]
 8000f0c:	e7b3      	b.n	8000e76 <_malloc_r+0x22>
 8000f0e:	6862      	ldr	r2, [r4, #4]
 8000f10:	42a3      	cmp	r3, r4
 8000f12:	bf0c      	ite	eq
 8000f14:	6032      	streq	r2, [r6, #0]
 8000f16:	605a      	strne	r2, [r3, #4]
 8000f18:	e7ec      	b.n	8000ef4 <_malloc_r+0xa0>
 8000f1a:	4623      	mov	r3, r4
 8000f1c:	6864      	ldr	r4, [r4, #4]
 8000f1e:	e7b2      	b.n	8000e86 <_malloc_r+0x32>
 8000f20:	4634      	mov	r4, r6
 8000f22:	6876      	ldr	r6, [r6, #4]
 8000f24:	e7b9      	b.n	8000e9a <_malloc_r+0x46>
 8000f26:	230c      	movs	r3, #12
 8000f28:	603b      	str	r3, [r7, #0]
 8000f2a:	4638      	mov	r0, r7
 8000f2c:	f000 f8b6 	bl	800109c <__malloc_unlock>
 8000f30:	e7a1      	b.n	8000e76 <_malloc_r+0x22>
 8000f32:	6025      	str	r5, [r4, #0]
 8000f34:	e7de      	b.n	8000ef4 <_malloc_r+0xa0>
 8000f36:	bf00      	nop
 8000f38:	20000088 	.word	0x20000088

08000f3c <_sbrk_r>:
 8000f3c:	b538      	push	{r3, r4, r5, lr}
 8000f3e:	4d06      	ldr	r5, [pc, #24]	; (8000f58 <_sbrk_r+0x1c>)
 8000f40:	2300      	movs	r3, #0
 8000f42:	4604      	mov	r4, r0
 8000f44:	4608      	mov	r0, r1
 8000f46:	602b      	str	r3, [r5, #0]
 8000f48:	f7ff fb30 	bl	80005ac <_sbrk>
 8000f4c:	1c43      	adds	r3, r0, #1
 8000f4e:	d102      	bne.n	8000f56 <_sbrk_r+0x1a>
 8000f50:	682b      	ldr	r3, [r5, #0]
 8000f52:	b103      	cbz	r3, 8000f56 <_sbrk_r+0x1a>
 8000f54:	6023      	str	r3, [r4, #0]
 8000f56:	bd38      	pop	{r3, r4, r5, pc}
 8000f58:	20000090 	.word	0x20000090

08000f5c <__sread>:
 8000f5c:	b510      	push	{r4, lr}
 8000f5e:	460c      	mov	r4, r1
 8000f60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f64:	f000 f8a0 	bl	80010a8 <_read_r>
 8000f68:	2800      	cmp	r0, #0
 8000f6a:	bfab      	itete	ge
 8000f6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000f6e:	89a3      	ldrhlt	r3, [r4, #12]
 8000f70:	181b      	addge	r3, r3, r0
 8000f72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000f76:	bfac      	ite	ge
 8000f78:	6563      	strge	r3, [r4, #84]	; 0x54
 8000f7a:	81a3      	strhlt	r3, [r4, #12]
 8000f7c:	bd10      	pop	{r4, pc}

08000f7e <__swrite>:
 8000f7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f82:	461f      	mov	r7, r3
 8000f84:	898b      	ldrh	r3, [r1, #12]
 8000f86:	05db      	lsls	r3, r3, #23
 8000f88:	4605      	mov	r5, r0
 8000f8a:	460c      	mov	r4, r1
 8000f8c:	4616      	mov	r6, r2
 8000f8e:	d505      	bpl.n	8000f9c <__swrite+0x1e>
 8000f90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f94:	2302      	movs	r3, #2
 8000f96:	2200      	movs	r2, #0
 8000f98:	f000 f868 	bl	800106c <_lseek_r>
 8000f9c:	89a3      	ldrh	r3, [r4, #12]
 8000f9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000fa2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000fa6:	81a3      	strh	r3, [r4, #12]
 8000fa8:	4632      	mov	r2, r6
 8000faa:	463b      	mov	r3, r7
 8000fac:	4628      	mov	r0, r5
 8000fae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000fb2:	f000 b817 	b.w	8000fe4 <_write_r>

08000fb6 <__sseek>:
 8000fb6:	b510      	push	{r4, lr}
 8000fb8:	460c      	mov	r4, r1
 8000fba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fbe:	f000 f855 	bl	800106c <_lseek_r>
 8000fc2:	1c43      	adds	r3, r0, #1
 8000fc4:	89a3      	ldrh	r3, [r4, #12]
 8000fc6:	bf15      	itete	ne
 8000fc8:	6560      	strne	r0, [r4, #84]	; 0x54
 8000fca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000fce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000fd2:	81a3      	strheq	r3, [r4, #12]
 8000fd4:	bf18      	it	ne
 8000fd6:	81a3      	strhne	r3, [r4, #12]
 8000fd8:	bd10      	pop	{r4, pc}

08000fda <__sclose>:
 8000fda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fde:	f000 b813 	b.w	8001008 <_close_r>
	...

08000fe4 <_write_r>:
 8000fe4:	b538      	push	{r3, r4, r5, lr}
 8000fe6:	4d07      	ldr	r5, [pc, #28]	; (8001004 <_write_r+0x20>)
 8000fe8:	4604      	mov	r4, r0
 8000fea:	4608      	mov	r0, r1
 8000fec:	4611      	mov	r1, r2
 8000fee:	2200      	movs	r2, #0
 8000ff0:	602a      	str	r2, [r5, #0]
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	f7ff fa89 	bl	800050a <_write>
 8000ff8:	1c43      	adds	r3, r0, #1
 8000ffa:	d102      	bne.n	8001002 <_write_r+0x1e>
 8000ffc:	682b      	ldr	r3, [r5, #0]
 8000ffe:	b103      	cbz	r3, 8001002 <_write_r+0x1e>
 8001000:	6023      	str	r3, [r4, #0]
 8001002:	bd38      	pop	{r3, r4, r5, pc}
 8001004:	20000090 	.word	0x20000090

08001008 <_close_r>:
 8001008:	b538      	push	{r3, r4, r5, lr}
 800100a:	4d06      	ldr	r5, [pc, #24]	; (8001024 <_close_r+0x1c>)
 800100c:	2300      	movs	r3, #0
 800100e:	4604      	mov	r4, r0
 8001010:	4608      	mov	r0, r1
 8001012:	602b      	str	r3, [r5, #0]
 8001014:	f7ff fa95 	bl	8000542 <_close>
 8001018:	1c43      	adds	r3, r0, #1
 800101a:	d102      	bne.n	8001022 <_close_r+0x1a>
 800101c:	682b      	ldr	r3, [r5, #0]
 800101e:	b103      	cbz	r3, 8001022 <_close_r+0x1a>
 8001020:	6023      	str	r3, [r4, #0]
 8001022:	bd38      	pop	{r3, r4, r5, pc}
 8001024:	20000090 	.word	0x20000090

08001028 <_fstat_r>:
 8001028:	b538      	push	{r3, r4, r5, lr}
 800102a:	4d07      	ldr	r5, [pc, #28]	; (8001048 <_fstat_r+0x20>)
 800102c:	2300      	movs	r3, #0
 800102e:	4604      	mov	r4, r0
 8001030:	4608      	mov	r0, r1
 8001032:	4611      	mov	r1, r2
 8001034:	602b      	str	r3, [r5, #0]
 8001036:	f7ff fa90 	bl	800055a <_fstat>
 800103a:	1c43      	adds	r3, r0, #1
 800103c:	d102      	bne.n	8001044 <_fstat_r+0x1c>
 800103e:	682b      	ldr	r3, [r5, #0]
 8001040:	b103      	cbz	r3, 8001044 <_fstat_r+0x1c>
 8001042:	6023      	str	r3, [r4, #0]
 8001044:	bd38      	pop	{r3, r4, r5, pc}
 8001046:	bf00      	nop
 8001048:	20000090 	.word	0x20000090

0800104c <_isatty_r>:
 800104c:	b538      	push	{r3, r4, r5, lr}
 800104e:	4d06      	ldr	r5, [pc, #24]	; (8001068 <_isatty_r+0x1c>)
 8001050:	2300      	movs	r3, #0
 8001052:	4604      	mov	r4, r0
 8001054:	4608      	mov	r0, r1
 8001056:	602b      	str	r3, [r5, #0]
 8001058:	f7ff fa8f 	bl	800057a <_isatty>
 800105c:	1c43      	adds	r3, r0, #1
 800105e:	d102      	bne.n	8001066 <_isatty_r+0x1a>
 8001060:	682b      	ldr	r3, [r5, #0]
 8001062:	b103      	cbz	r3, 8001066 <_isatty_r+0x1a>
 8001064:	6023      	str	r3, [r4, #0]
 8001066:	bd38      	pop	{r3, r4, r5, pc}
 8001068:	20000090 	.word	0x20000090

0800106c <_lseek_r>:
 800106c:	b538      	push	{r3, r4, r5, lr}
 800106e:	4d07      	ldr	r5, [pc, #28]	; (800108c <_lseek_r+0x20>)
 8001070:	4604      	mov	r4, r0
 8001072:	4608      	mov	r0, r1
 8001074:	4611      	mov	r1, r2
 8001076:	2200      	movs	r2, #0
 8001078:	602a      	str	r2, [r5, #0]
 800107a:	461a      	mov	r2, r3
 800107c:	f7ff fa88 	bl	8000590 <_lseek>
 8001080:	1c43      	adds	r3, r0, #1
 8001082:	d102      	bne.n	800108a <_lseek_r+0x1e>
 8001084:	682b      	ldr	r3, [r5, #0]
 8001086:	b103      	cbz	r3, 800108a <_lseek_r+0x1e>
 8001088:	6023      	str	r3, [r4, #0]
 800108a:	bd38      	pop	{r3, r4, r5, pc}
 800108c:	20000090 	.word	0x20000090

08001090 <__malloc_lock>:
 8001090:	4801      	ldr	r0, [pc, #4]	; (8001098 <__malloc_lock+0x8>)
 8001092:	f7ff be0b 	b.w	8000cac <__retarget_lock_acquire_recursive>
 8001096:	bf00      	nop
 8001098:	20000084 	.word	0x20000084

0800109c <__malloc_unlock>:
 800109c:	4801      	ldr	r0, [pc, #4]	; (80010a4 <__malloc_unlock+0x8>)
 800109e:	f7ff be06 	b.w	8000cae <__retarget_lock_release_recursive>
 80010a2:	bf00      	nop
 80010a4:	20000084 	.word	0x20000084

080010a8 <_read_r>:
 80010a8:	b538      	push	{r3, r4, r5, lr}
 80010aa:	4d07      	ldr	r5, [pc, #28]	; (80010c8 <_read_r+0x20>)
 80010ac:	4604      	mov	r4, r0
 80010ae:	4608      	mov	r0, r1
 80010b0:	4611      	mov	r1, r2
 80010b2:	2200      	movs	r2, #0
 80010b4:	602a      	str	r2, [r5, #0]
 80010b6:	461a      	mov	r2, r3
 80010b8:	f7ff fa0a 	bl	80004d0 <_read>
 80010bc:	1c43      	adds	r3, r0, #1
 80010be:	d102      	bne.n	80010c6 <_read_r+0x1e>
 80010c0:	682b      	ldr	r3, [r5, #0]
 80010c2:	b103      	cbz	r3, 80010c6 <_read_r+0x1e>
 80010c4:	6023      	str	r3, [r4, #0]
 80010c6:	bd38      	pop	{r3, r4, r5, pc}
 80010c8:	20000090 	.word	0x20000090

080010cc <_init>:
 80010cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010ce:	bf00      	nop
 80010d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010d2:	bc08      	pop	{r3}
 80010d4:	469e      	mov	lr, r3
 80010d6:	4770      	bx	lr

080010d8 <_fini>:
 80010d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010da:	bf00      	nop
 80010dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010de:	bc08      	pop	{r3}
 80010e0:	469e      	mov	lr, r3
 80010e2:	4770      	bx	lr
